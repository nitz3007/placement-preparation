/*Niharika Thakur
19-06-2019
12:03
linked list: insertion, deletion, reverse, update, search*/


#include <bits/stdc++.h>
using namespace std;

class Node
{
    public:
    int data;
    Node *next;
}*start;

class single_llist
{
    public:
    single_llist()
    {
        start= NULL;
    }
    Node* create_node(int value)
    {
        Node *temp;
        temp = new(Node);
        if(temp==NULL)
        {
            cout<<"Memory not allocated"<<endl;
            return 0;
        }
        else
        {
            temp->data = value;
            temp->next= NULL;
            return temp;
        }
    }
    
    void insert_begin()
    {
        int value;
        cin>>value;
        Node *temp,*p;
        temp= create_node(value);
        if(start== NULL)
        {
            start= temp;
            start->next= NULL;
        }
        else
        {
            p=start;
            start=temp;
            start->next= p;
        }
    }
    void insert_last()
    {
        int value;
        cin>>value;
        Node *temp,*s;
        temp= create_node(value);
        s=start;
        while(s->next != NULL)
        {
            s=s->next;
        }
        s->next=temp;
        temp->next= NULL;
        
    }
    
    void insert_pos()
    {
        int value,pos,counter=0,i;
        cin>>value>>pos;
        Node *temp,*s,*ptr;
        temp= create_node(value);
        s=start;
        while(s !=NULL)
        {
            s=s->next;
            counter++;
        }
        if(pos==1)
        {
            if(start==NULL)
            {
                start=temp;
                start->next= NULL;
            }
            else
            {
                ptr=start;
                start=temp;
                start->next= ptr;
            }
        }
        else if(pos>1 && pos<=counter)
        {
            s=start;
            for(i=1; i<pos; i++)
            {
                ptr=s;
                s=s->next;
            }
            ptr->next=temp;
            temp->next=s;
        }
        else
            cout<<"Position out of range"<<endl;
    }
    void display()
    {
        Node *temp;
        if(start==NULL)
        {
            cout<<"Linked list is empty";
        }
        temp=start;
        cout<<"Linked list: ";
        while(temp->next != NULL)
        {
            cout<<temp->data<<"->";
            temp= temp->next;
        }
        cout<<temp->data<<endl;
    }
    void reverse()
    {
        Node *ptr1,*ptr2,*ptr3;
        if(start==NULL)
        {
            cout<<"empty list"<<endl;
            return;
        }
        ptr1=start;
        ptr2=ptr1->next;
        ptr3=ptr2->next;
        ptr1->next=NULL;
        ptr2->next= ptr1;
        while(ptr3 != NULL)
        {
            ptr1= ptr2;
            ptr2=ptr3;
            ptr3= ptr3->next;
            ptr2->next= ptr1;
        }
        start=ptr2;
        
    }
    void delete_pos()
    {
        if(start==NULL)
        {
            cout<<"Empty string";
            return;
        }
        Node *s,*ptr;
        int pos,i,counter=0;
        cin>>pos;
        s=start;
        if(pos==1)
        {
            if(start=start->next);
        }
        else
        {
            while(s != NULL)
            {
                s=s->next;
                counter++;
            }
            if(pos>1 && pos<=counter)
            {
                s=start;
                for(i=1; i<pos; i++ )
                {
                    ptr=s;
                    s=s->next;
                }
                ptr->next= s->next;
            }
            else
                cout<<"Position out of range";
        }
        
    }
    void update()
    {
        if(start==NULL)
        {
            cout<<"Empty list"<<endl;
            return;
        }
        int pos,value,i;
        cin>>pos>>value;
        Node *s,*ptr;
        s=start;
        if(pos==1)
        {
            start->data= value;
        }
        else
        {
            for(i=1; i<pos; i++)
            {
               if(s==NULL)
               {
                   cout<<"there are less than"<<pos<<"elements"<<endl;
                   return;
               }
               s=s->next;
            }
            s->data=value;
            
        }
        cout<<"Linked list updated"<<endl;
    }
    void search()
    {
        if(start==NULL)
        {
            cout<<"Empty string"<<endl;
            return;
        }
        int value,pos=0;
        bool flag= false;
        cin>>value;
        Node *s;
        s=start;
        while(s != NULL)
        {
            pos++;
            if(s->data==value)
            {
                flag=true;
                cout<<"Element "<<value<<" found at position "<<pos<<endl;
                return;
            }
            s=s->next;
        }
        if(!flag)
            cout<<"Element "<<value<<" not found."<<endl;
    }
};

int main() {
	
	int choice;
	single_llist s1;
	while(1)
	{
	    cout<<"Choose\n 1. Insert at begin\n 2. Insert at end\n 3. Insert at position\n 4. Display linked list\n 5. Reverse linked list\n 6. delete at position\n 7. Update\n 8. search\n 9. exit\n";
	    cin>>choice;
	    switch(choice)
	    {
	        case 1: s1.insert_begin();
	            break;
	        case 2: s1.insert_last();
	            break;
	        case 3: s1.insert_pos();
	            break;
	        case 4: s1.display();
	            break;
	        case 5: s1.reverse();
	            break;
	        case 6: s1.delete_pos();
	            break;
	        case 7: s1.update();
	            break;
	        case 8: s1.search();
	            break;
	        case 9: exit(0);
	   
	        default: cout<<"invalid input"<<endl;
	            
	    }
	}
	return 0;
}
